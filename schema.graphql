enum underlyingProtocol {
  uniswapV3
  algebra
}

enum Network {
  mainnet
  arbitrum
  celo
  matic
  optimism
}

enum HypervisorPositionType {
  base
  limit
}

enum FeeCollectionSnapshotType {
  current
  previous
}

enum TickType {
  lower
  upper
}

type Protocol @entity(immutable: true) {
  "Hypervisor registry address"
  id: String!
  "Name of protocol"
  name: String!
  "Underlying infrastructure protocol"
  underlyingProtocol: underlyingProtocol!
  "Network/chain"
  network: Network!
  "Subgraph version"
  version: String!
}

type Hypervisor @entity(immutable: true) {
  "Address of hypervisor"
  id: Bytes!
  "Address of underlying pool"
  pool: Pool!
  "Token 0"
  token0: Token!
  "Token 1"
  token1: Token!
  "Base position attributes"
  basePosition: HypervisorPosition!
  "limit position attributes"
  limitPosition: HypervisorPosition!
  "Fee snapshots"
  feeSnapshots: [FeeSnapshot!]! @derivedFrom(field: "hypervisor")

}

type HypervisorPosition @entity {
  "{Hypervisor ID}-{Position Type}"
  id: String!
  "Hypervisor address of this position"
  hypervisor: Hypervisor!
  "Whether this is a base or limit position"
  type: HypervisorPositionType!
  "Position key for querying pool"
  key: Bytes
  "The lower tick for this position range"
  tickLower: Tick!
  "The upper tick for this position range"
  tickUpper: Tick!
  "Liquidity associated with this position"
  liquidity: BigInt!
  "Token 0 owed"
  tokensOwed0: BigInt!
  "Token 1 owed"
  tokensOwed1: BigInt!
  "Fee growth inside of token 0"
  feeGrowthInside0X128: BigInt!
  "Fee growth inside of token 1"
  feeGrowthInside1X128: BigInt!
  "Block in which tick was last updated"
  lastUpdatedBlock: BigInt!
}

type Pool @entity {
  "Address of DEX pool"
  id: Bytes!
  "Tick spacing for pool"
  tickSpacing: BigInt!
  "Current tick"
  currentTick: Int!
  "fee growth global of token 0"
  feeGrowthGlobal0X128: BigInt!
  "fee growth global of token 1"
  feeGrowthGlobal1X128: BigInt!
  "Hypervisors using this pool"
  hypervisors: [Hypervisor!]! @derivedFrom(field: "pool")
  "Ticks for this pool"
  ticks: [Tick!]! @derivedFrom(field: "pool")
  "Last updated block for fee growth"
  lastUpdatedBlock: BigInt!
  "Ticks currently used for lower and upper ticks in associated hypervisors"
  _ticksActive: [Int!]!
  "Previous tick"
  _previousTick: Int!
  "fee growth global of token 0 from before latest update"
  _previousFeeGrowthGlobal0X128: BigInt!
  "fee growth global of token 1 from before latest update"
  _previousFeeGrowthGlobal1X128: BigInt!
}

type Tick @entity {
  "{pool}#{TickIdx}"
  id: String!
  "Pool this tick is associated with"
  pool: Pool!
  "Tick index"
  tickIdx: Int!
  "Fee growth outside of token 0"
  feeGrowthOutside0X128: BigInt!
  "Fee growth outside of token 1"
  feeGrowthOutside1X128: BigInt!
  "Block in which tick was last updated for fee growth"
  lastUpdatedBlock: BigInt!
  "Previous tick"
  _previousTickIdx: Int!
  "fee growth global of token 0 from before latest update"
  _previousFeeGrowthOutside0X128: BigInt!
  "fee growth global of token 1 from before latest update"
  _previousFeeGrowthOutside1X128: BigInt!
}

type Token @entity(immutable: true) {
  "token address"
  id: Bytes!
  "token symbol"
  symbol: String!
  "token name"
  name: String!
  "token decimals"
  decimals: Int!
}

type FeeSnapshot @entity(immutable: true) {
  "{hypervisor}-{block}"
  id: String!
  hypervisor: Hypervisor!
  blockNumber: BigInt!
  timestamp: BigInt!
  previousBlock: FeeCollectionSnapshot!
  currentBlock: FeeCollectionSnapshot!
}

type FeeCollectionSnapshot @entity {
  "{Fee Snapshot ID}-{FeeCollectionSnapshotType}"
  id: String!
  "Pool tick"
  type: FeeCollectionSnapshotType!
  "Parent feeSnapshot entity ID"
  feeSnapshot: FeeSnapshot!
  "Pool tick"
  tick: Int!
  "fee growth global of token 0"
  feeGrowthGlobal0X128: BigInt!
  "fee growth global of token 1"
  feeGrowthGlobal1X128: BigInt!
  "Base position snapshot"
  basePosition: PositionSnapshot!
  "Limit position snapshot"
  limitPosition: PositionSnapshot!
  "Inidicates whether entity has been initialised with data"
  _initialized: Boolean!
}

type PositionSnapshot @entity {
  "{feeCollectionSnapshot ID}-{positionType}"
  id: String!
  "Position Type"
  type: HypervisorPositionType!
  "Parent fee collection snapshot"
  feeCollectionSnapshot: FeeCollectionSnapshot!
  "The lower tick for this position range"
  tickLower: TickSnapshot!
  "The upper tick for this position range"
  tickUpper: TickSnapshot!
  "Liquidity associated with this position"
  liquidity: BigInt!
  "Token 0 owed"
  tokensOwed0: BigInt!
  "Token 1 owed"
  tokensOwed1: BigInt!
  "Fee growth inside of token 0"
  feeGrowthInside0X128: BigInt!
  "Fee growth inside of token 1"
  feeGrowthInside1X128: BigInt!
}

type TickSnapshot @entity {
  "{Position Snapshot ID}-{Tick Type}"
  id: String!
  "Tick type"
  type: TickType!
  "Parent position snapshot"
  positionSnapshot: PositionSnapshot!
  "The lower tick for this position range"
  tickIdx: Int!
  "Fee growth outside of token 0"
  feeGrowthOutside0X128: BigInt!
  "Fee growth outside of token 1"
  feeGrowthOutside1X128: BigInt!
}
